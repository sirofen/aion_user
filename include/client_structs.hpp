#pragma once
#include <cstdint>

namespace aion_structures::constants {
inline constexpr wchar_t kProcessName[] = L"Aion.bin";
inline constexpr wchar_t kGameModuleName[] = L"Game.dll";
inline constexpr wchar_t kCry3dEngineModuleName[] = L"Cry3DEngine.dll";

inline constexpr auto kRadarEnable = 0x5;
inline constexpr auto kRadarDisable = 0x0;

inline constexpr auto kGravityEnable = 0x0;
inline constexpr auto kGravityDisable = 0x6;
}

namespace aion_structures {
namespace game {
__pragma(pack(push, 2))// yep
struct entity_inf {
    char _pad0[0x42];
    std::uint8_t level;
    char _pad1[0x3];
    char name[0x20];
    char _pad2[0x494];
    std::uint32_t attack_speed;
    char _pad3[0x1CE];
    float speed;
    char _pad4[0x208];
    char gravity;// gravity 0x0, no gravity 0x6
};
__pragma(pack(pop))

struct entity_pos {
    char _pad0[0x98];
    float x;
    float y;
    float z;
};

struct entity {
    char _pad0[0x180];
    entity_pos* pos;
    char _pad1[0x1E0];
    entity_inf* inf;
};

struct unk3 {
    char _pad0[0x20];
    entity* self_player;
};

struct unk2 {
    char _pad0[0x10];
    unk3* unk3;
};

struct unk1 {
    char _pad0[0x70];
    unk2* unk2;
};

struct game_module {
    char _pad0[0xDC7918];
    unk1* unk1;
    char _pad1[0x930];
    entity* target_entity;
};
}// namespace game

namespace cry3dengine {
struct radar {
    char _pad0[0x2B8];
    char init;// on 0x5, off 0x0
};
struct cry3dengine_module {
    char _pad0[0x26BF68];
    radar* radar;
};
}// namespace cry3dengine


namespace patterns::console {
constexpr unsigned char pattern[] = {
        0x63, 0x6F, 0x6E, 0x5F, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6C, 0x65, 0x5F, 0x63, 0x6F, 0x6E, 0x73,
        0x6F, 0x6C, 0x65, 0x00, 0xCD, 0xCD, 0xCD, 0xCD, 0xCD, 0xCD, 0xCD, 0xCD, 0xCD, 0xCD, 0xCD, 0xCD,
        0xCD, 0xCD, 0xCD, 0xCD, 0xCD, 0xCD, 0xCD, 0xC0, 0xEF, 0x45, 0x41, 0x00, 0x00, 0x00, 0x00, 0xCD,
        0xCD, 0xCD, 0xCD, 0xCD, 0xCD, 0xCD, 0xCD, 0xCD, 0xCD, 0xCD, 0xCD, 0xCD, 0xCD, 0xCD, 0xCD, 0xCD,
        0xCD, 0xCD, 0xCD, 0xCD, 0xCD, 0xCD, 0xCD, 0xCD, 0xCD, 0xCD, 0xCD, 0xCD, 0xCD, 0xCD, 0xCD, 0xCD,
        0xCD, 0xCD, 0xCD, 0xCD, 0xCD, 0xCD, 0xCD, 0xCD, 0xCD, 0xCD, 0xCD, 0xCD, 0xCD, 0xCD, 0xCD, 0xCD,
        0xCD, 0xCD, 0xCD, 0xCD, 0xCD, 0xCD, 0xCD, 0xCD, 0xCD, 0xCD, 0xCD, 0xCD, 0xCD, 0xCD, 0xCD, 0xCD,
        0xCD, 0xCD, 0xCD, 0xCD, 0xCD, 0xCD, 0xCD, 0xCD, 0xCD, 0xCD, 0xCD, 0xCD, 0xCD, 0xCD, 0xCD, 0xCD,
        0xCD, 0xCD, 0xCD, 0xCD, 0xCD, 0xCD, 0xCD, 0x0A, 0xA5, 0x62, 0x0D, 0x00, 0x00, 0x00, 0x00, 0x0A,
        0x08, 0x00, 0x00, 0x03, 0x00, 0x00
};
constexpr char mask[] =
        "1111111111111111"
        "1111000000000000"
        "0000000000000000"
        "0000000000000000"
        "0000000000000000"
        "0000000000000000"
        "0000000000000000"
        "0000000000000000"
        "0000000000000001"
        "111111";

constexpr std::uint32_t disable_console_offset = 0xAF;
}
}


